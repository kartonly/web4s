security:
    encoders:
        # this internal class is used by Symfony to represent in-memory users
        Symfony\Component\Security\Core\User\User: 'auto'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        backend_users:
            memory:
                users:
                    #admin: { password: '$argon2id$v=19$m=65536,t=4,p=1$ZTFPOW9wWGsxc3p0ZWRIVg$wxITPy3OQq7r1OsWSMxNQ+5Hf4ENcbY6OLQSBNBsGVQ', roles: ['ROLE_ADMIN'] } #admin
                    user: { password: '$argon2id$v=19$m=65536,t=4,p=1$aHRsZ0JFYVZ4TzMwZ2hnQw$77v1BmzHqRN/En9GuvP7OyjlbVwAsWOK2Y/fwbWWUFk', roles: ['ROLE_USER'] } #user
                    admin: { password: '$$argon2id$v=19$m=65536,t=4,p=1$dDVxUm5FRDBraEkxcmg0cA$053vyGIXG8za6nufKOKhRt1Tag/n6bo6k83qlPJk1bQ', roles: ['ROLE_ADMIN'] } #admin1
            
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/api/
            anonymous: false
            provider: backend_users
            http_basic:
                realm: Secured Area

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
